{"version":3,"sources":["components/Button.js","components/ImageViewer.js","components/IconButton.js","components/CircleButton.js","components/EmojiSticker.js","components/EmojiPicker.js","components/EmojiList.js","App.js","assets/images/emoji1.png","assets/images/emoji2.png","assets/images/emoji3.png","assets/images/emoji4.png","assets/images/emoji5.png","assets/images/emoji6.png","assets/images/background-image.png"],"names":["Button","theme","label","onPress","View","style","styles","buttonContainer","borderWidth","borderColor","borderRadius","Pressable","button","FontAwesome","name","size","color","buttonIcon","Text","buttonLabel","StyleSheet","create","width","height","marginHorizontal","alignItems","justifyContent","padding","flexDirection","paddingRight","fontSize","ImageViewer","placeholderImageSource","selectedImage","imageSource","uri","Image","source","image","IconButton","icon","iconButton","MaterialIcons","iconButtonLabel","marginTop","CircleButton","circleButtonContainer","circleButton","flex","backgroundColor","AnimatedImage","Animated","createAnimatedComponent","AnimatedView","EmojiSticker","imageSize","stickerSource","translateX","useSharedValue","translateY","scaleImage","imageStyle","useAnimatedStyle","withSpring","value","onDoubleTap","useAnimatedGestureHandler","onActive","onDrag","onStart","event","context","translationX","translationY","containerStyle","transform","onGestureEvent","top","numberOfTaps","resizeMode","EmojiPicker","isVisible","children","onClose","Modal","animationType","transparent","visible","modalContent","titleContainer","title","borderTopRightRadius","borderTopLeftRadius","position","bottom","paddingHorizontal","pickerContainer","paddingVertical","EmojiList","onSelect","onCloseModal","useState","require","emoji","FlatList","horizontal","showsHorizontalScrollIndicator","Platform","OS","data","contentContainerStyle","listContainer","renderItem","item","index","marginRight","PlaceholderImage","App","setSelectedImage","isModalVisible","setIsModalVisible","showAppOptions","setShowAppOptions","pickedEmoji","setPickedEmoji","imageRef","useRef","pickImageAsync","result","ImagePicker","allowsEditing","quality","canceled","alert","assets","onModalClose","onSaveImageAsync","localUri","captureRef","MediaLibrary","saveToLibraryAsync","e","console","log","domtoimage","toJpeg","current","then","dataUrl","link","document","createElement","download","href","click","catch","container","imageContainer","ref","collapsable","optionsContainer","optionsRow","footerContainer","StatusBar","paddingTop","module","exports"],"mappings":"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","file":"static/js/app.145dea3d.chunk.js","sourcesContent":["import { StyleSheet, View, Pressable, Text } from 'react-native';\r\nimport FontAwesome from \"@expo/vector-icons/FontAwesome\";\r\n\r\n/* @info The prop theme to detect the button variant. */ \r\nexport default function Button({ theme, label, onPress }) {\r\n  if (theme === \"primary\") {\r\n    return (\r\n      <View\r\n        style={[styles.buttonContainer, { borderWidth: 4, borderColor: \"#ffd33d\", borderRadius: 18 }]}\r\n      >\r\n        <Pressable style={styles.button} onPress={onPress} >\r\n\r\n          <FontAwesome\r\n            name=\"picture-o\"\r\n            size={18}\r\n            color=\"#FFF\"\r\n            style={styles.buttonIcon}\r\n          />\r\n          <Text style={[styles.buttonLabel, { color: \"#FFF\" }]}>{label}</Text>\r\n        </Pressable>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View style={styles.buttonContainer}>\r\n      <Pressable style={styles.button} onPress={onPress} >\r\n        <Text style={styles.buttonLabel}>{label}</Text>\r\n      </Pressable>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  buttonContainer: {\r\n    width: 320,\r\n    height: 68,\r\n    marginHorizontal: 20,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    padding: 3,\r\n  },\r\n  button: {\r\n    borderRadius: 10,\r\n    width: '100%',\r\n    height: '100%',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    flexDirection: 'row',\r\n  },\r\n  buttonIcon: {\r\n    paddingRight: 8,\r\n  },\r\n  buttonLabel: {\r\n    color: '#fff',\r\n    fontSize: 16,\r\n  },\r\n});","\r\n\r\nimport { StyleSheet, Image } from 'react-native';\r\n\r\nexport default function ImageViewer({ placeholderImageSource, selectedImage }) {\r\n  const imageSource = selectedImage !== null\r\n    ? { uri: selectedImage }\r\n    : placeholderImageSource;\r\n\r\n  return <Image source={imageSource} style={styles.image} />;\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  image: {\r\n    width: 320,\r\n    height: 440,\r\n    borderRadius: 18,\r\n  },\r\n});","import { Pressable, StyleSheet, Text } from 'react-native';\r\nimport MaterialIcons from '@expo/vector-icons/MaterialIcons';\r\n\r\nexport default function IconButton({ icon, label, onPress }) {\r\n    return (\r\n        <Pressable style={styles.iconButton} onPress={onPress}>\r\n            <MaterialIcons name={icon} size={24} color=\"#fff\" />\r\n            <Text style={styles.iconButtonLabel}>{label}</Text>\r\n        </Pressable>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    iconButton: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    iconButtonLabel: {\r\n        color: '#fff',\r\n        marginTop: 12,\r\n    },\r\n});\r\n","import { View, Pressable, StyleSheet } from 'react-native';\r\nimport MaterialIcons from '@expo/vector-icons/MaterialIcons';\r\n\r\nexport default function CircleButton({ onPress }) {\r\n    return (\r\n        <View style={styles.circleButtonContainer}>\r\n            <Pressable style={styles.circleButton} onPress={onPress}>\r\n                <MaterialIcons name=\"add\" size={38} color=\"#25292e\" />\r\n            </Pressable>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    circleButtonContainer: {\r\n        width: 84,\r\n        height: 84,\r\n        marginHorizontal: 60,\r\n        borderWidth: 4,\r\n        borderColor: '#ffd33d',\r\n        borderRadius: 42,\r\n        padding: 3,\r\n    },\r\n    circleButton: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        borderRadius: 42,\r\n        backgroundColor: '#fff',\r\n    },\r\n});\r\n","import Animated, {\r\n    useAnimatedStyle,\r\n    useSharedValue,\r\n    useAnimatedGestureHandler,\r\n    withSpring,\r\n} from 'react-native-reanimated';\r\nimport { View, Image } from 'react-native';\r\n\r\nimport { PanGestureHandler, TapGestureHandler } from \"react-native-gesture-handler\";\r\n\r\nconst AnimatedImage = Animated.createAnimatedComponent(Image);\r\nconst AnimatedView = Animated.createAnimatedComponent(View);\r\n\r\nexport default function EmojiSticker({ imageSize, stickerSource }) {\r\n    const translateX = useSharedValue(0);\r\n    const translateY = useSharedValue(0);\r\n    const scaleImage = useSharedValue(imageSize);\r\n\r\n    const imageStyle = useAnimatedStyle(() => {\r\n        return {\r\n            width: withSpring(scaleImage.value),\r\n            height: withSpring(scaleImage.value),\r\n        };\r\n    });\r\n\r\n    const onDoubleTap = useAnimatedGestureHandler({\r\n        onActive: () => {\r\n            if (scaleImage.value) {\r\n                scaleImage.value = scaleImage.value * 2;\r\n            }\r\n        },\r\n    });\r\n\r\n    const onDrag = useAnimatedGestureHandler({\r\n        onStart: (event, context) => {\r\n            context.translateX = translateX.value;\r\n            context.translateY = translateY.value;\r\n        },\r\n        onActive: (event, context) => {\r\n            translateX.value = event.translationX + context.translateX;\r\n            translateY.value = event.translationY + context.translateY;\r\n        },\r\n    });\r\n\r\n    const containerStyle = useAnimatedStyle(() => {\r\n        return {\r\n            transform: [\r\n                {\r\n                    translateX: translateX.value,\r\n                },\r\n                {\r\n                    translateY: translateY.value,\r\n                },\r\n            ],\r\n        };\r\n    });\r\n\r\n\r\n    return (\r\n        <PanGestureHandler onGestureEvent={onDrag}>\r\n            <AnimatedView style={[containerStyle, { top: -350 }]}>\r\n                <TapGestureHandler onGestureEvent={onDoubleTap} numberOfTaps={2}>\r\n                    <AnimatedImage\r\n                        source={stickerSource}\r\n                        resizeMode=\"contain\"\r\n                        style={[imageStyle, { width: imageSize, height: imageSize }]}\r\n                    />\r\n                </TapGestureHandler>\r\n            </AnimatedView>\r\n        </PanGestureHandler>\r\n    );\r\n}","import { Modal, View, Text, Pressable, StyleSheet } from 'react-native';\r\nimport MaterialIcons from '@expo/vector-icons/MaterialIcons';\r\n\r\nexport default function EmojiPicker({ isVisible, children, onClose }) {\r\n    return (\r\n        <Modal animationType=\"slide\" transparent={true} visible={isVisible}>\r\n            <View style={styles.modalContent}>\r\n                <View style={styles.titleContainer}>\r\n                    <Text style={styles.title}>Choose a sticker</Text>\r\n                    <Pressable onPress={onClose}>\r\n                        <MaterialIcons name=\"close\" color=\"#fff\" size={22} />\r\n                    </Pressable>\r\n                </View>\r\n                {children}\r\n            </View>\r\n        </Modal>\r\n    );\r\n}\r\nconst styles = StyleSheet.create({\r\n    modalContent: {\r\n        height: '25%',\r\n        width: '100%',\r\n        backgroundColor: '#25292e',\r\n        borderTopRightRadius: 18,\r\n        borderTopLeftRadius: 18,\r\n        position: 'absolute',\r\n        bottom: 0,\r\n    },\r\n    titleContainer: {\r\n        height: '16%',\r\n        backgroundColor: '#464C55',\r\n        borderTopRightRadius: 10,\r\n        borderTopLeftRadius: 10,\r\n        paddingHorizontal: 20,\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n    },\r\n    title: {\r\n        color: '#fff',\r\n        fontSize: 16,\r\n    },\r\n    pickerContainer: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        paddingHorizontal: 50,\r\n        paddingVertical: 20,\r\n    },\r\n});\r\n","import { useState } from 'react';\r\nimport { StyleSheet, FlatList, Image, Platform, Pressable } from 'react-native';\r\n\r\nexport default function EmojiList({ onSelect, onCloseModal }) {\r\n    const [emoji] = useState([\r\n        require('../assets/images/emoji1.png'),\r\n        require('../assets/images/emoji2.png'),\r\n        require('../assets/images/emoji3.png'),\r\n        require('../assets/images/emoji4.png'),\r\n        require('../assets/images/emoji5.png'),\r\n        require('../assets/images/emoji6.png'),\r\n    ]);\r\n\r\n    return (\r\n        <FlatList\r\n            horizontal\r\n            showsHorizontalScrollIndicator={Platform.OS === 'web' ? true : false}\r\n            data={emoji}\r\n            contentContainerStyle={styles.listContainer}\r\n            renderItem={({ item, index }) => {\r\n                return (\r\n                    <Pressable\r\n                        onPress={() => {\r\n                            onSelect(item);\r\n                            onCloseModal();\r\n                        }}>\r\n                        <Image source={item} key={index} style={styles.image} />\r\n                    </Pressable>\r\n                );\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    listContainer: {\r\n        borderTopRightRadius: 10,\r\n        borderTopLeftRadius: 10,\r\n        paddingHorizontal: 20,\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n    },\r\n    image: {\r\n        width: 100,\r\n        height: 100,\r\n        marginRight: 20,\r\n    },\r\n});\r\n","import { StatusBar } from \"expo-status-bar\";\nimport { useState, useRef } from \"react\";\nimport { StyleSheet, View, Platform  } from \"react-native\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { GestureHandlerRootView } from \"react-native-gesture-handler\";\nimport { captureRef } from 'react-native-view-shot';\nimport domtoimage from 'dom-to-image';\n\n// Components\nimport Button from './components/Button';\nimport ImageViewer from './components/ImageViewer';\nimport IconButton from './components/IconButton';\nimport CircleButton from './components/CircleButton';\nimport EmojiSticker from './components/EmojiSticker';\nimport EmojiPicker from './components/EmojiPicker';\nimport EmojiList from './components/EmojiList'\n\nconst PlaceholderImage = require(\"./assets/images/background-image.png\");\n\nexport default function App() {\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [showAppOptions, setShowAppOptions] = useState(false);\n  const [pickedEmoji, setPickedEmoji] = useState(null);\n\n\n  const imageRef = useRef();\n\n  const pickImageAsync = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      allowsEditing: true,\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      setSelectedImage(result.assets[0].uri);\n      setShowAppOptions(true);\n      setIsModalVisible(true)\n    } else {\n      alert('You did not select any image.');\n    }\n  };\n\n  const onReset = () => {\n    setShowAppOptions(false);\n    setPickedEmoji(null);\n  };\n\n  const onAddSticker = () => {\n    setIsModalVisible(true);\n  };\n\n  const onModalClose = () => {\n    setIsModalVisible(false);\n  };\n\n  const onSaveImageAsync = async () => {\n    if (Platform.OS !== 'web') {\n      try {\n        const localUri = await captureRef(imageRef, {\n          height: 440,\n          quality: 1,\n        });\n        await MediaLibrary.saveToLibraryAsync(localUri);\n        if (localUri) {\n          alert('Saved!');\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    } else {\n      domtoimage\n        .toJpeg(imageRef.current, {\n            quality: 0.95,\n            width: 320,\n            height: 440,\n          })\n        .then(dataUrl => {\n          let link = document.createElement('a');\n          link.download = 'sticker-smash.jpeg';\n          link.href = dataUrl;\n          link.click();\n        })\n        .catch(e => {\n          console.log(e);\n        });\n    }\n  };\n\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <View style={styles.imageContainer}>\n        <View ref={imageRef} collapsable={false}>\n          <ImageViewer\n            placeholderImageSource={PlaceholderImage}\n            selectedImage={selectedImage}\n          />\n          {pickedEmoji !== null ? (\n            <EmojiSticker imageSize={40} stickerSource={pickedEmoji} />\n          ) : null}\n        </View>\n      </View>\n\n      {showAppOptions ? (\n        <View style={styles.optionsContainer}>\n          <View style={styles.optionsRow}>\n            <IconButton icon=\"refresh\" label=\"Reset\" onPress={onReset} />\n            <CircleButton onPress={onAddSticker} />\n            <IconButton icon=\"save-alt\" label=\"Save\" onPress={onSaveImageAsync} />\n          </View>\n        </View>\n      ) : (\n        <View style={styles.footerContainer}>\n          <Button theme=\"primary\" label=\"Choose a photo\" onPress={pickImageAsync} />\n          <Button label=\"Use this photo\" onPress={() => setShowAppOptions(true)} />\n        </View>\n      )}\n\n      <EmojiPicker isVisible={isModalVisible} onClose={onModalClose}>\n        <EmojiList onSelect={setPickedEmoji} onCloseModal={onModalClose} />\n      </EmojiPicker>\n      <StatusBar style=\"auto\" />\n      {/* <Button theme=\"primary\" label=\"Choose a photo\" onPress={pickImageAsync} /> */}\n    </GestureHandlerRootView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n    paddingTop: 58,\n  },\n  footerContainer: {\n    flex: 1 / 3,\n    alignItems: 'center',\n  },\n  optionsContainer: {\n    position: 'absolute',\n    bottom: 80,\n  },\n  optionsRow: {\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n});\n","module.exports = __webpack_public_path__ + \"static/media/emoji1.7df01aee.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji2.5685d9a2.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji3.d02b4d80.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji4.9f86a388.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji5.3ca0d7e3.png\";","module.exports = __webpack_public_path__ + \"static/media/emoji6.e2cad3fa.png\";","module.exports = __webpack_public_path__ + \"static/media/background-image.979cd865.png\";"],"sourceRoot":""}